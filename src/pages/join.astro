---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Join Us" description="Join the WoofCare network. Register your organization to help stray dogs in your community.">
  <!-- Hero Section -->
  <section class="join-hero">
    <div class="container">
      <h1>Join the WoofCare Network</h1>
      <p class="hero-subtitle">Register your organization and help us connect resources to stray dogs in need</p>
    </div>
  </section>

  <!-- Form Section -->
  <section class="section form-section">
    <div class="container">
      <div class="form-wrapper">
        <div class="form-header">
          <h2>WoofCare Data Collection</h2>
          <p>Help us build a comprehensive network of dog care resources. Fill out the form below to register your organization.</p>
        </div>

        <form class="join-form" id="joinForm" novalidate>
          <!-- Organization Name -->
          <div class="form-group">
            <label for="orgName">What is the name of the organization? *</label>
            <input 
              type="text" 
              id="orgName" 
              name="orgName" 
              required 
              placeholder="Enter organization name"
            />
            <span class="error-message" id="orgName-error"></span>
          </div>

          <!-- Type of Organization -->
          <div class="form-group">
            <label for="orgType">Type of Organization? *</label>
            <select id="orgType" name="orgType" required>
              <option value="">Select type...</option>
              <option value="NGO">NGO</option>
              <option value="Rescue/Shelter">Rescue/Shelter</option>
              <option value="Vet Clinic/Animal Hospital">Vet Clinic/Animal Hospital</option>
              <option value="Local Caretaker/Feeder">Local Caretaker/Feeder</option>
            </select>
            <span class="error-message" id="orgType-error"></span>
          </div>

          <!-- Website Link -->
          <div class="form-group">
            <label for="website">Website link?</label>
            <input 
              type="url" 
              id="website" 
              name="website" 
              placeholder="https://example.com"
            />
          </div>

          <!-- Phone Number -->
          <div class="form-group">
            <label for="phone">Phone Number</label>
            <input 
              type="tel" 
              id="phone" 
              name="phone" 
              placeholder="+1 (555) 123-4567"
            />
          </div>

          <!-- Email -->
          <div class="form-group">
            <label for="email">Email</label>
            <input 
              type="email" 
              id="email" 
              name="email" 
              placeholder="contact@example.com"
            />
          </div>

          <!-- Name of Person in Charge -->
          <div class="form-group">
            <label for="personInCharge">Name of person in charge *</label>
            <input 
              type="text" 
              id="personInCharge" 
              name="personInCharge" 
              required 
              placeholder="Enter full name"
            />
            <span class="error-message" id="personInCharge-error"></span>
          </div>

          <!-- Location/Address -->
          <div class="form-group">
            <label for="location">Location/Address *</label>
            <textarea 
              id="location" 
              name="location" 
              rows="3" 
              required 
              placeholder="Enter complete address with city and state"
            ></textarea>
            <span class="error-message" id="location-error"></span>
          </div>

          <!-- Date of Establishment -->
          <div class="form-group">
            <label for="dateEstablished">Date of Establishment</label>
            <input 
              type="date" 
              id="dateEstablished" 
              name="dateEstablished"
            />
          </div>

          <!-- Number of Centers -->
          <div class="form-group">
            <label for="numCenters">Number of Centers?</label>
            <input 
              type="number" 
              id="numCenters" 
              name="numCenters" 
              min="0" 
              placeholder="0"
            />
          </div>

          <!-- Social Media -->
          <div class="form-group">
            <label for="socialMedia">Social Media if Applicable (Instagram, Facebook, Youtube, etc.)</label>
            <textarea 
              id="socialMedia" 
              name="socialMedia" 
              rows="3" 
              placeholder="Enter social media links (one per line)"
            ></textarea>
          </div>

          <!-- Submit Button -->
          <button type="submit" class="btn btn-primary submit-btn">
            <span class="btn-text">Submit</span>
            <span class="btn-loader" style="display: none;">Submitting...</span>
          </button>
        </form>

        <div id="formMessage" class="form-message"></div>
      </div>

      <!-- Info Cards -->
      <div class="info-section">
        <h3>Why Join WoofCare?</h3>
        <div class="info-cards">
          <div class="info-card">
            <div class="info-icon">üåê</div>
            <h4>Expand Your Reach</h4>
            <p>Connect with dog lovers and potential adopters in your area through our network.</p>
          </div>

          <div class="info-card">
            <div class="info-icon">ü§ù</div>
            <h4>Collaborate</h4>
            <p>Work together with other NGOs, shelters, and caregivers to help more dogs.</p>
          </div>

          <div class="info-card">
            <div class="info-icon">üì±</div>
            <h4>Get Discovered</h4>
            <p>Be featured on the WoofCare app when it launches, connecting you with people who want to help.</p>
          </div>

          <div class="info-card">
            <div class="info-icon">üí°</div>
            <h4>Share Resources</h4>
            <p>Access crowdfunding tools and community support to sustain your operations.</p>
          </div>
        </div>
      </div>
    </div>
  </section>
</Layout>

<style>
  .join-hero {
    background: linear-gradient(135deg, var(--primary-brown), var(--dark-brown));
    color: var(--white);
    padding: 4rem 0;
    text-align: center;
  }

  .join-hero h1 {
    color: var(--white);
    font-size: 3.5rem;
    margin-bottom: 1rem;
  }

  .hero-subtitle {
    font-size: 1.3rem;
    color: var(--light-cream);
    max-width: 700px;
    margin: 0 auto;
  }

  .form-section {
    background-color: var(--light-cream);
    padding: 4rem 0;
  }

  .form-wrapper {
    background-color: var(--white);
    padding: 3rem;
    border-radius: 12px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    max-width: 800px;
    margin: 0 auto 3rem;
  }

  .form-header {
    text-align: center;
    margin-bottom: 3rem;
  }

  .form-header h2 {
    color: var(--dark-brown);
    font-size: 2rem;
    margin-bottom: 1rem;
  }

  .form-header p {
    color: var(--text-medium);
    font-size: 1.1rem;
  }

  .join-form {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .form-group {
    display: flex;
    flex-direction: column;
  }

  .form-group label {
    margin-bottom: 0.5rem;
    color: var(--text-dark);
    font-weight: 600;
    font-size: 1rem;
  }

  .form-group input,
  .form-group select,
  .form-group textarea {
    width: 100%;
    padding: 0.875rem;
    border: 2px solid var(--cream);
    border-radius: 8px;
    font-size: 1rem;
    transition: border-color 0.3s ease;
    font-family: inherit;
    background-color: var(--light-cream);
  }

  .form-group input:focus,
  .form-group select:focus,
  .form-group textarea:focus {
    outline: none;
    border-color: var(--primary-brown);
    background-color: var(--white);
  }

  .form-group input.error,
  .form-group select.error,
  .form-group textarea.error {
    border-color: #d32f2f;
  }

  .form-group select {
    cursor: pointer;
  }

  .form-group textarea {
    resize: vertical;
    min-height: 100px;
  }

  .error-message {
    color: #d32f2f;
    font-size: 0.875rem;
    font-style: italic;
    margin-top: 0.25rem;
    min-height: 1.2rem;
    display: block;
  }

  .submit-btn {
    margin-top: 1rem;
    font-size: 1.1rem;
    padding: 1rem 2rem;
    width: 100%;
    position: relative;
  }

  .submit-btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }

  .form-message {
    margin-top: 1.5rem;
    padding: 1.5rem;
    border-radius: 12px;
    text-align: center;
    font-weight: 600;
    font-size: 1.1rem;
    display: none;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }

  .form-message.success {
    background-color: #d4edda;
    color: #155724;
    border: 2px solid #28a745;
    display: block;
  }

  .form-message.error {
    background-color: #f8d7da;
    color: #721c24;
    border: 2px solid #dc3545;
    display: block;
  }

  /* Info Section */
  .info-section {
    margin-top: 3rem;
  }

  .info-section h3 {
    text-align: center;
    color: var(--dark-brown);
    font-size: 2rem;
    margin-bottom: 2rem;
  }

  .info-cards {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1.5rem;
  }

  .info-card {
    background-color: var(--white);
    padding: 2rem;
    border-radius: 12px;
    text-align: center;
    border: 2px solid var(--cream);
    transition: all 0.3s ease;
  }

  .info-card:hover {
    border-color: var(--primary-brown);
    transform: translateY(-5px);
    box-shadow: 0 6px 20px rgba(184, 121, 43, 0.2);
  }

  .info-icon {
    font-size: 2.5rem;
    margin-bottom: 1rem;
  }

  .info-card h4 {
    color: var(--dark-brown);
    margin-bottom: 0.75rem;
    font-size: 1.2rem;
  }

  .info-card p {
    color: var(--text-medium);
    font-size: 0.95rem;
  }

  .form-group label::after {
    content: '';
  }

  .form-group label:has(+ input[required])::after,
  .form-group label:has(+ select[required])::after,
  .form-group label:has(+ textarea[required])::after {
    color: #d32f2f;
  }

  @media (max-width: 768px) {
    .join-hero h1 {
      font-size: 2.5rem;
    }

    .hero-subtitle {
      font-size: 1.1rem;
    }

    .form-wrapper {
      padding: 2rem 1.5rem;
    }

    .form-header h2 {
      font-size: 1.5rem;
    }

    .info-cards {
      grid-template-columns: 1fr;
    }
  }
</style>

<script type="module">
  import { initializeApp } from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-app.js';
  import { getFirestore, collection, addDoc, serverTimestamp } from 'https://www.gstatic.com/firebasejs/10.7.1/firebase-firestore.js';


  const firebaseConfig = {
    apiKey: "AIzaSyCvzQDGbU8ndDGJ3mGCeWA0mSsCNRhsbt0",
    authDomain: "woofcare-a9fac.firebaseapp.com",
    projectId: "woofcare-a9fac",
    storageBucket: "woofcare-a9fac.firebasestorage.app",
    messagingSenderId: "506976961145",
    appId: "1:506976961145:web:551d2afd7dc9f0e8240aa8",
    measurementId: "G-FJDV4K81CK"
  };

  // Initialize Firebase
  const app = initializeApp(firebaseConfig);
  const db = getFirestore(app);

  console.log('üî• Firebase loaded from CDN');
  console.log('üìä Database instance:', db);

  // Join form handling with Firebase
  const form = document.getElementById('joinForm');
  const formMessage = document.getElementById('formMessage');
  const submitBtn = form?.querySelector('.submit-btn');
  const btnText = submitBtn?.querySelector('.btn-text');
  const btnLoader = submitBtn?.querySelector('.btn-loader');

  // Validation function
  function validateForm() {
    console.log('üîç Validating form...');
    let isValid = true;
    let firstErrorField = null;

    // Clear all previous errors
    document.querySelectorAll('.error-message').forEach(el => {
      el.textContent = '';
    });
    document.querySelectorAll('.error').forEach(el => {
      el.classList.remove('error');
    });

    // Required fields
    const requiredFields = [
      { id: 'orgName', name: 'Organization name' },
      { id: 'orgType', name: 'Organization type' },
      { id: 'personInCharge', name: 'Person in charge' },
      { id: 'location', name: 'Location/Address' }
    ];

    requiredFields.forEach(field => {
      const input = document.getElementById(field.id);
      const errorElement = document.getElementById(`${field.id}-error`);
      
      if (!input.value.trim()) {
        errorElement.textContent = `${field.name} is required`;
        input.classList.add('error');
        isValid = false;
        
        // Store the first error field
        if (!firstErrorField) {
          firstErrorField = input;
        }
        
        console.log(`‚ùå Validation failed: ${field.name} is empty`);
      }
    });

    if (isValid) {
      console.log('‚úÖ Form validation passed!');
    } else {
      console.log('‚ùå Form validation failed - please fill required fields');
      
      // Scroll to the first error field
      if (firstErrorField) {
        firstErrorField.scrollIntoView({ 
          behavior: 'smooth', 
          block: 'center' 
        });
        firstErrorField.focus();
        console.log('üìç Scrolled to first missing field');
      }
    }

    return isValid;
  }

  if (form) {
    console.log('‚úÖ Form found, event listener attached');
    
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      console.log('üìù Form submit button clicked!');

      // Validate form
      if (!validateForm()) {
        console.log('‚ö†Ô∏è Form submission blocked due to validation errors');
        return;
      }

      console.log('‚úÖ Form validation passed, proceeding with submission...');

      // Disable submit button and show loader
      submitBtn.disabled = true;
      btnText.style.display = 'none';
      btnLoader.style.display = 'inline';

      const formData = new FormData(form);
      
      // Prepare data object for Firestore
      const data = {
        orgName: formData.get('orgName'),
        orgType: formData.get('orgType'),
        website: formData.get('website') || '',
        phone: formData.get('phone') || '',
        email: formData.get('email') || '',
        personInCharge: formData.get('personInCharge'),
        location: formData.get('location'),
        dateEstablished: formData.get('dateEstablished') || '',
        numCenters: formData.get('numCenters') ? parseInt(formData.get('numCenters')) : 0,
        socialMedia: formData.get('socialMedia') || '',
        createdAt: serverTimestamp(),
        status: 'pending'
      };

      try {
        console.log('üîÑ Attempting to submit data to Firestore:', data);
        console.log('üìä Database reference:', db);
        
        // Add document to 'organizations' collection
        const docRef = await addDoc(collection(db, 'organizations'), data);
        
        console.log('‚úÖ SUCCESS! Document written with ID:', docRef.id);
        console.log('üéâ Form submitted successfully to Firebase!');
        
        // Show success message
        formMessage.textContent = 'Thank you for joining WoofCare! Your organization has been successfully registered.';
        formMessage.className = 'form-message success';
        
        // Scroll to success message so user sees it
        formMessage.scrollIntoView({ 
          behavior: 'smooth', 
          block: 'center' 
        });
        
        // Reset form
        form.reset();
        
      } catch (error) {
        // Show detailed error message
        console.error('‚ùå ERROR adding document:', error);
        console.error('Error code:', error.code);
        console.error('Error message:', error.message);
        
        formMessage.textContent = `Error: ${error.message}. Check browser console for details.`;
        formMessage.className = 'form-message error';
        
        // Scroll to error message so user sees it
        formMessage.scrollIntoView({ 
          behavior: 'smooth', 
          block: 'center' 
        });
      } finally {
        // Re-enable submit button and hide loader
        submitBtn.disabled = false;
        btnText.style.display = 'inline';
        btnLoader.style.display = 'none';
        
        // Hide message after 10 seconds
        setTimeout(() => {
          formMessage.style.display = 'none';
        }, 10000);
      }
    });

    // Real-time validation on blur
    const requiredInputs = form.querySelectorAll('[required]');
    requiredInputs.forEach(input => {
      input.addEventListener('blur', () => {
        const errorElement = document.getElementById(`${input.id}-error`);
        if (!input.value.trim()) {
          errorElement.textContent = 'This field is required';
          input.classList.add('error');
        } else {
          errorElement.textContent = '';
          input.classList.remove('error');
        }
      });

      input.addEventListener('input', () => {
        if (input.value.trim()) {
          const errorElement = document.getElementById(`${input.id}-error`);
          errorElement.textContent = '';
          input.classList.remove('error');
        }
      });
    });

  } else {
    console.error('‚ùå Form not found! Check if id="joinForm" exists');
  }
</script>